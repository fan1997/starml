include (eigen)

if (USE_CUDA)
  set(CUDA_SEPARABLE_COMPILATION ON)
  find_package(CUDA REQUIRED)
  add_definitions(-DWITH_CUDA)
  foreach(cuda_lib_path ${CUDA_LIBRARIES})
    get_filename_component(cuda_lib_name ${cuda_lib_path} NAME)
    if (${cuda_lib_name} STREQUAL libcudart_static.a)
      get_filename_component(cuda_lib_dir ${cuda_lib_path} DIRECTORY)
      break()
    endif()
  endforeach()
  if(NOT EXISTS ${cuda_lib_dir}/libcudart_static.a)
    if(NOT EXISTS ${CUDA_cudart_static_LIBRARY})
      message(FATAL_ERROR "cuda lib not found: ${cuda_lib_dir}/libcudart_static.a")
    endif()
    get_filename_component(cuda_lib_dir ${CUDA_cudart_static_LIBRARY} DIRECTORY)
  endif()
  set(extra_cuda_libs libculibos.a libcurand_static.a)
  foreach(extra_cuda_lib ${extra_cuda_libs})
    list(APPEND CUDA_LIBRARIES ${cuda_lib_dir}/${extra_cuda_lib})
  endforeach()
  foreach(cublas_lib_path ${CUDA_CUBLAS_LIBRARIES})
    get_filename_component(cublas_lib_name ${cublas_lib_path} NAME)
    if (${cublas_lib_name} STREQUAL libcublas.so)
      get_filename_component(cublas_lib_dir ${cublas_lib_path} DIRECTORY)
      break()
    endif()
  endforeach()
  if(EXISTS ${cublas_lib_dir}/libcublas_static.a AND EXISTS ${cublas_lib_dir}/libcublasLt_static.a)
    list(APPEND CUDA_LIBRARIES ${cublas_lib_dir}/libcublasLt_static.a)
    list(APPEND CUDA_LIBRARIES ${cublas_lib_dir}/libcublas_static.a)
  elseif(EXISTS ${cublas_lib_dir}/libcublas_static.a)
    list(APPEND CUDA_LIBRARIES ${cublas_lib_dir}/libcublas_static.a)
  elseif(EXISTS ${cuda_lib_dir}/libcublas_static.a)
    list(APPEND CUDA_LIBRARIES ${cuda_lib_dir}/libcublas_static.a)
  else()
    message(FATAL_ERROR "cuda lib not found: ${cublas_lib_dir}/libcublas_static.a or ${cuda_lib_dir}/libcublas_static.a")
  endif()
  list(APPEND starml_third_party_libs ${CUDA_LIBRARIES})
endif()

set(BLA_STATIC ON)
set(BLA_VENDOR "Intel10_64lp_seq")
find_package(BLAS)
if (NOT BLAS_FOUND)
  set(BLA_VENDOR "All")
  find_package(BLAS)
endif()
message(STATUS "Found Blas Lib: " ${BLAS_LIBRARIES})

list(APPEND STARML_INCLUDE_SRC_DIRS ${EIGEN_INCLUDE_DIR})
include_directories(${STARML_INCLUDE_SRC_DIRS})
